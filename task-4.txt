Öğrenci No: 250541037
AD-SOYAD: MUHAMMED CENGİZ

Lütfen seçtiğiniz algoritmaya ait çözümü ve diğer isterleri aşağıya ekleyiniz:

RENKLERİ KARIŞTIRARAK HEDEF RENGİ ELDE ETME

import java.util.*;

class Renk {
    int R, G, B;

    Renk() {}
    Renk(int R, int G, int B) { this.R = R; this.G = G; this.B = B; }

    @Override
    public String toString() {
        return "(" + R + "," + G + "," + B + ")";
    }
}

class RenkKaristirici {
    List<Renk> renkler;
    Renk hedefRenk;
    double esik = 5.0;
    Random rnd = new Random();

    RenkKaristirici(List<Renk> renkler, Renk hedefRenk) {
        this.renkler = renkler;
        this.hedefRenk = hedefRenk;
    }

    void hedefRengiBul() {
        int n = renkler.size();
        double[] agirliklar = new double[n];
        for (int i = 0; i < n; i++) agirliklar[i] = 1.0 / n;

        boolean hedefeUlasildi = false;
        int adim = 0;
        while (!hedefeUlasildi && adim < 10000) { // max adım sınırlaması
            adim++;
            Renk karisim = agirlikliKaristir(renkler, agirliklar);
            double fark = renkFarki(karisim, hedefRenk);

            if (fark < esik) {
                hedefeUlasildi = true;
                System.out.println("Ulaşılan karışım rengi: " + karisim);
                System.out.println("Kullanılan ağırlıklar: " + Arrays.toString(agirliklar));
            } else {
                agirliklar = agirliklariGuncelle(agirliklar);
            }
        }
        if (!hedefeUlasildi) System.out.println("Hedef renk bulunamadı.");
    }

    Renk agirlikliKaristir(List<Renk> renkler, double[] agirliklar) {
        double toplamR = 0, toplamG = 0, toplamB = 0;
        for (int i = 0; i < renkler.size(); i++) {
            toplamR += renkler.get(i).R * agirliklar[i];
            toplamG += renkler.get(i).G * agirliklar[i];
            toplamB += renkler.get(i).B * agirliklar[i];
        }
        return new Renk((int)Math.round(toplamR), (int)Math.round(toplamG), (int)Math.round(toplamB));
    }

    double renkFarki(Renk a, Renk b) {
        return Math.sqrt(Math.pow(a.R - b.R, 2) + Math.pow(a.G - b.G, 2) + Math.pow(a.B - b.B, 2));
    }

    double[] agirliklariGuncelle(double[] agirliklar) {
        // Basit rastgele küçük değişiklik
        int idx = rnd.nextInt(agirliklar.length);
        double delta = (rnd.nextDouble() - 0.5) * 0.1; // -0.05 ile +0.05 arasında değiştir
        agirliklar[idx] += delta;

        // normalize et (toplam = 1)
        double toplam = 0;
        for (double w : agirliklar) toplam += w;
        for (int i = 0; i < agirliklar.length; i++) agirliklar[i] /= toplam;

        return agirliklar;
    }
}

public class RenkKaristirmaSimulasyonu {
    public static void main(String[] args) {
        List<Renk> baslangicRenkleri = Arrays.asList(
            new Renk(255,0,0), // kırmızı
            new Renk(0,255,0), // yeşil
            new Renk(0,0,255)  // mavi
        );

        Renk hedef = new Renk(128,128,0); // örnek hedef renk

        RenkKaristirici karistirici = new RenkKaristirici(baslangicRenkleri, hedef);
        karistirici.hedefRengiBul();
    }
}

